from collections import defaultdict

from pandas import Float64Dtype, Int64Dtype, StringDtype, Timestamp


class AvatureConsts:
    """Set data flow configuration vars from .env file"""

    AVATURE_DATE_FORMAT: str = "%d-%b-%Y"
    EXCEL_CSV_DATE_FORMAT = "%m/%d/%Y"
    REPORT_DATE: Timestamp = Timestamp.today().normalize()

    AVATURE_RENAMED_COLUMNS: dict[str, str] = {
        "Job workflow step": "Workflow Step",
        "Ad | (Default) Description": "Job Description",
        "Ad | (Default) Job Title": "Job Title",
        "Ad | Required Experience": "Required Experience",
        "Ad | Education Required": "Education Required",
        "Ad | Post to LinkedIn? (Job Slot)": "Post to LinkedIn",
        "C | Recruiter": "Recruiter",
        "C | Hiring Manager": "Hiring Manager",
        "C | Hiring HR": "Hiring HR",
        "JI | Professional Field": "Professional Field",
        "JI | Specialization": "Specialization",
        "JI | HR Division": "HR Division",
        "JI | Brand": "Brand",
        "JI | Code": "Job Code",
        "JI | Code (Reference)": "Job Code (Reference)",
        "JI | Location": "Location",
        "JI | Contractual Location": "Contractual Location",
        "JI | Country": "Country",
        "JI | Position Type": "Position Type",
        "JI | Recruitment Start Date": "Recruitment Start Date",
        "JI | No. of Openings per Req": "Openings per req",
        "JI | Number of hires": "Hires per req",
        "JI | Number of openings ‚Äì Number of hires üîí": "Remaining openings",
        "JI | Reason for opening": "Reason for opening",
        "USA | Job Mapping Level": "Job Mapping Level",
        "USA | US Function": "US Function",
        "USA | US Division Group": "US Division Group",
        "USA | US Division Description": "US Division Description",
        "USA | PRISM Req ID": "PRISM Req ID",
        "USA | US West Coast Job": "US West Coast Job",
        "USA | Previous Employee": "Previous Employee",
        "USA | US Grade": "US Grade",
        "USA | FLSA Status": "FLSA Status",
        "USA | Summary Notes": "Summary Notes",
        "ONE PROFILE | Area": "One Profile - Area",
        "ONE PROFILE | Business Unit": "One Profile - Business Unit",
        "ONE PROFILE | Cost Center": "One Profile - Cost Center",
        "ONE PROFILE | Cost Center Code": "One Profile - Cost Center Code",
        "ONE PROFILE | Job code name": "One Profile - Job code name",
        "ONE PROFILE | Legal Entity": "One Profile - Legal Entity",
        "ONE PROFILE| Employee Group": "One Profile - Employee Group",
        "Base Salary/Hourly Rate Amount": "Base Salary",
        "Sign on bonus amount": "Sign on Bonus",
        "Person record ID": "Person ID",
        "People in step category:  New Candidate": "New Applicants",
        "People in step category:  üÖøÔ∏è | POP - Internal Candidates": "POP Applicants",
        "People in step category:  Undergoing Assessments": "Undergoing Assessments",
        "People in step category:  Offer & Background Check": "Offer & Background Check",
        "People in step category:  Hired": "Hired",
        "DD | Gender": "Gender",
        "DD | Race": "Ethnicity",
        "DD | US Veterans": "Veteran",
        "DD | Disability": "Disability",
        "EI | Employee ID (CAROL)": "Employee ID (CAROL)",
        "EI | Person ID (GPZ)": "Person ID (One Profile)",
        "EI | Carol Gender üîí": "Gender",
        "EI | Employee current zone üîí": "Employee Current Zone",
        "EI | Employee Entity üîí": "Employee Entity",
        "EI | Professional Field": "Employee Professional Field",
        "PI | Work History": "Work History",
        "PI | Education": "Education",
        "Did the candidate play Brandstorm?": "Brandstorm participant?",
        "Did the candidate come from a pipeline?": "Pipeline candidate?",
        "Was the candidate in your pipeline before being hired?": "Pipeline candidate?",
    }

    AVATURE_SCHEMA_DTYPES: dict = {
        "Job ID": Int64Dtype(),
        "Job workflow step": StringDtype(),
        "Ad | (Default) Description": StringDtype(),
        "Ad | (Default) Job Title": StringDtype(),
        "Ad | Required Experience": StringDtype(),
        "Ad | Education Required": StringDtype(),
        "Ad | Post to LinkedIn? (Job Slot)": StringDtype(),
        "C | Recruiter": StringDtype(),
        "C | Hiring Manager": StringDtype(),
        "C | Hiring HR": StringDtype(),
        "JI | Professional Field": StringDtype(),
        "JI | Specialization": StringDtype(),
        "JI | HR Division": StringDtype(),
        "JI | Brand": StringDtype(),
        "JI | Code": StringDtype(),
        "JI | Code (Reference)": StringDtype(),
        "JI | Location": StringDtype(),
        "JI | Contractual Location": StringDtype(),
        "JI | Country": StringDtype(),
        "JI | Position Type": StringDtype(),
        "JI | No. of Openings per Req": Float64Dtype(),
        "JI | Number of hires": Float64Dtype(),
        "JI | Number of openings ‚Äì Number of hires üîí": Float64Dtype(),
        "JI | Reason for opening": StringDtype(),
        "USA | Job Mapping Level": StringDtype(),
        "USA | US Function": StringDtype(),
        "USA | US Division Group": StringDtype(),
        "USA | US Division Description": StringDtype(),
        "USA | PRISM Req ID": StringDtype(),
        "USA | US West Coast Job": StringDtype(),
        "USA | Previous Employee": StringDtype(),
        "USA | US Grade": StringDtype(),
        "USA | FLSA Status": StringDtype(),
        "USA | Summary Notes": StringDtype(),
        "ONE PROFILE | Area": StringDtype(),
        "ONE PROFILE | Business Unit": StringDtype(),
        "ONE PROFILE | Cost Center": StringDtype(),
        "ONE PROFILE | Cost Center Code": StringDtype(),
        "ONE PROFILE | Job code name": StringDtype(),
        "ONE PROFILE | Legal Entity": StringDtype(),
        "ONE PROFILE| Employee Group": StringDtype(),
        "Base Salary/Hourly Rate Amount": Float64Dtype(),
        "Sign on bonus amount": Float64Dtype(),
        "Linked people": Float64Dtype(),
        "People in step category:  New Candidate": Float64Dtype(),
        "People in step category:  üÖøÔ∏è | POP - Internal Candidates": Float64Dtype(),
        "People in step category:  Undergoing Assessments": Float64Dtype(),
        "People in step category:  Offer & Background Check": Float64Dtype(),
        "People in step category:  Hired": Float64Dtype(),
        "Person ID": Int64Dtype(),
        "Full name": StringDtype(),
        "Applicant Type": StringDtype(),
        "DD | Gender": StringDtype(),
        "DD | Race": StringDtype(),
        "DD | US Veterans": StringDtype(),
        "DD | Disability": StringDtype(),
        "EI | Employee ID (CAROL)": Int64Dtype(),
        "EI | Person ID (GPZ)": Int64Dtype(),
        "EI | Carol Gender üîí": StringDtype(),
        "EI | Employee current zone üîí": StringDtype(),
        "EI | Employee Entity üîí": StringDtype(),
        "EI | Professional Field": StringDtype(),
        "PI | Work History": StringDtype(),
        "PI | Education": StringDtype(),
        "Employer": StringDtype(),
        "Company Industry": StringDtype(),
        "Source": StringDtype(),
        "Other source": StringDtype(),
        "Select the source of recruitment :": StringDtype(),
        "Did the candidate play Brandstorm?": StringDtype(),
        "Did the candidate come from a pipeline?": StringDtype(),
        "Tags": StringDtype(),
        "ID": Int64Dtype(),
        "Historic step order": Int64Dtype(),
        "Linked job step order": Int64Dtype(),
    }

    FUNNEL_STAGES: list[str] = [
        "Event Registration",
        "Application",
        "Identification",
        "Recruiter Interview",
        "Presentation",
        "Business Interview",
        "Offer",
    ]

    BASE_APPLICANT_COLS: dict[str, list[str]] = {
        "External": [
            "Person ID",
            "Full name",
            "DD | Gender",
            "DD | Race",
            "DD | US Veterans",
            "DD | Disability",
            "Source",
            "Link to job date",
        ],
        "Internal": [
            "Person ID",
            "Full name",
            "EI | Employee ID (CAROL)",
            "EI | Person ID (GPZ)",
            "EI | Employee current zone üîí",
            "EI | Employee Entity üîí",
            "EI | Carol Gender üîí",
            "Link to job date",
        ],
        "Internship": [
            "Person ID",
            "Full name",
            "DD | Gender",
            "DD | Race",
            "DD | US Veterans",
            "DD | Disability",
            "Source",
            "University",
            "Link to job date",
        ],
        "Registrant": [
            "Person ID",
            "Full name",
            "DD | Gender",
            "DD | Race",
            "DD | US Veterans",
            "DD | Disability",
            "Visit date",
        ],
    }

    WORK_HISTORY_COLS: list[str] = [
        "Person ID",
        "Last update",
        "Position date started",
        "Employer",
        "Position Title",
    ]

    EDUCATION_COLS: list[str] = [
        "Person ID",
        "Last update",
        "Date Started",
        "University",
        "University.1",
        "Major",
        "Degree",
        "GPA",
    ]

    TALENT_PORTAL_SURVEY_COLS: list[str] = [
        "Person ID",
        "Last update",
        "Visit date",
        "Areas of Interest",
        "Eligible to Work in the US",
        "Available to Start",
        "Preferred Work Arrangement",
        "Years of Experience",
        "Salary Expectations",
        "Additional Comments",
    ]

    # SQL Schema
    DIM_JOB_SCHEMA: dict = defaultdict(
        lambda: StringDtype(),
        {
            "Job ID": Int64Dtype(),
            "Linked people": Int64Dtype(),
            "New Applicants": Int64Dtype(),
            "POP Applicants": Int64Dtype(),
            "Undergoing Assessments": Int64Dtype(),
            "Offer & Background Check": Int64Dtype(),
            "Hired": Int64Dtype(),
            "Job Year": Int64Dtype(),
            "Days open": Int64Dtype(),
        },
    )
